#!/usr/bin/python3

import sys
import math
import random

def is_prime(num, iterations=5):
    """
    Check if a number is prime using the Miller-Rabin primality test.

    Args:
        num (int): The number to check for primality.
        iterations (int): The number of iterations for the test (higher values improve accuracy).

    Returns:
        bool: True if num is probably prime, False otherwise.
    """
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0:
        return False

    # Write num as d * 2^r + 1
    r, d = 0, num - 1
    while d % 2 == 0:
        r += 1
        d //= 2

    # Miller-Rabin primality test
    for _ in range(iterations):
        a = random.randint(2, num - 2)
        x = pow(a, d, num)
        if x == 1 or x == num - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, num)
            if x == num - 1:
                break
        else:
            return False
    return True

def pollard_rho(n):
    """
    Pollard's Rho algorithm for factorization.

    Args:
        n (int): The number to factorize.

    Returns:
        tuple: A tuple (p, q) representing the factorization if successful, or (None, None) if no factorization is found.
    """
    if n % 2 == 0:
        return 2, n // 2

    x, y, d = 2, 2, 1
    f = lambda x: (x ** 2 + 1) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = math.gcd(abs(x - y), n)

    if d == n:
        return None, None

    return d, n // d

# Check if a command-line argument is provided
if len(sys.argv) != 2:
    print("Usage: ./rsa.py <filename>")
    sys.exit(1)

# Get the filename from the command-line argument
filename = sys.argv[1]

try:
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        p, q = pollard_rho(n)
        if p and q:
            # Print the factorization in the specified format
            print(f"{n}={p}*{q}")
        else:
            # If no factorization is found, print an error message
            print("Factorization not found.")
except FileNotFoundError:
    # Handle the case where the input file is not found
    print(f"File not found: {filename}")
except ValueError:
    # Handle invalid input in the file
    print("Invalid input in the file.")
